// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wrt.proto

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_wrt_d384817e0f1fbd38, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DataReport struct {
	Time                 uint64       `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Nf                   []*Netfilter `protobuf:"bytes,2,rep,name=nf,proto3" json:"nf,omitempty"`
	Ct                   []*Conntrack `protobuf:"bytes,3,rep,name=ct,proto3" json:"ct,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DataReport) Reset()         { *m = DataReport{} }
func (m *DataReport) String() string { return proto.CompactTextString(m) }
func (*DataReport) ProtoMessage()    {}
func (*DataReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_wrt_d384817e0f1fbd38, []int{1}
}
func (m *DataReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataReport.Unmarshal(m, b)
}
func (m *DataReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataReport.Marshal(b, m, deterministic)
}
func (dst *DataReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataReport.Merge(dst, src)
}
func (m *DataReport) XXX_Size() int {
	return xxx_messageInfo_DataReport.Size(m)
}
func (m *DataReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DataReport.DiscardUnknown(m)
}

var xxx_messageInfo_DataReport proto.InternalMessageInfo

func (m *DataReport) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DataReport) GetNf() []*Netfilter {
	if m != nil {
		return m.Nf
	}
	return nil
}

func (m *DataReport) GetCt() []*Conntrack {
	if m != nil {
		return m.Ct
	}
	return nil
}

type Netfilter struct {
	Mac                  string   `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	In                   uint64   `protobuf:"varint,3,opt,name=in,proto3" json:"in,omitempty"`
	Out                  uint64   `protobuf:"varint,4,opt,name=out,proto3" json:"out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Netfilter) Reset()         { *m = Netfilter{} }
func (m *Netfilter) String() string { return proto.CompactTextString(m) }
func (*Netfilter) ProtoMessage()    {}
func (*Netfilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_wrt_d384817e0f1fbd38, []int{2}
}
func (m *Netfilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Netfilter.Unmarshal(m, b)
}
func (m *Netfilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Netfilter.Marshal(b, m, deterministic)
}
func (dst *Netfilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Netfilter.Merge(dst, src)
}
func (m *Netfilter) XXX_Size() int {
	return xxx_messageInfo_Netfilter.Size(m)
}
func (m *Netfilter) XXX_DiscardUnknown() {
	xxx_messageInfo_Netfilter.DiscardUnknown(m)
}

var xxx_messageInfo_Netfilter proto.InternalMessageInfo

func (m *Netfilter) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *Netfilter) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Netfilter) GetIn() uint64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Netfilter) GetOut() uint64 {
	if m != nil {
		return m.Out
	}
	return 0
}

type Conntrack struct {
	Proto                string   `protobuf:"bytes,1,opt,name=proto,proto3" json:"proto,omitempty"`
	Src                  string   `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst                  string   `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Srcp                 uint32   `protobuf:"varint,4,opt,name=srcp,proto3" json:"srcp,omitempty"`
	Dstp                 uint32   `protobuf:"varint,5,opt,name=dstp,proto3" json:"dstp,omitempty"`
	In                   uint64   `protobuf:"varint,6,opt,name=in,proto3" json:"in,omitempty"`
	Out                  uint64   `protobuf:"varint,7,opt,name=out,proto3" json:"out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Conntrack) Reset()         { *m = Conntrack{} }
func (m *Conntrack) String() string { return proto.CompactTextString(m) }
func (*Conntrack) ProtoMessage()    {}
func (*Conntrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_wrt_d384817e0f1fbd38, []int{3}
}
func (m *Conntrack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Conntrack.Unmarshal(m, b)
}
func (m *Conntrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Conntrack.Marshal(b, m, deterministic)
}
func (dst *Conntrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conntrack.Merge(dst, src)
}
func (m *Conntrack) XXX_Size() int {
	return xxx_messageInfo_Conntrack.Size(m)
}
func (m *Conntrack) XXX_DiscardUnknown() {
	xxx_messageInfo_Conntrack.DiscardUnknown(m)
}

var xxx_messageInfo_Conntrack proto.InternalMessageInfo

func (m *Conntrack) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *Conntrack) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *Conntrack) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *Conntrack) GetSrcp() uint32 {
	if m != nil {
		return m.Srcp
	}
	return 0
}

func (m *Conntrack) GetDstp() uint32 {
	if m != nil {
		return m.Dstp
	}
	return 0
}

func (m *Conntrack) GetIn() uint64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Conntrack) GetOut() uint64 {
	if m != nil {
		return m.Out
	}
	return 0
}

func init() {
	proto.RegisterType((*Status)(nil), "main.status")
	proto.RegisterType((*DataReport)(nil), "main.dataReport")
	proto.RegisterType((*Netfilter)(nil), "main.netfilter")
	proto.RegisterType((*Conntrack)(nil), "main.conntrack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReporterClient is the client API for Reporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReporterClient interface {
	ReportData(ctx context.Context, in *DataReport, opts ...grpc.CallOption) (*Status, error)
}

type reporterClient struct {
	cc *grpc.ClientConn
}

func NewReporterClient(cc *grpc.ClientConn) ReporterClient {
	return &reporterClient{cc}
}

func (c *reporterClient) ReportData(ctx context.Context, in *DataReport, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/main.Reporter/reportData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReporterServer is the server API for Reporter service.
type ReporterServer interface {
	ReportData(context.Context, *DataReport) (*Status, error)
}

func RegisterReporterServer(s *grpc.Server, srv ReporterServer) {
	s.RegisterService(&_Reporter_serviceDesc, srv)
}

func _Reporter_ReportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).ReportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Reporter/ReportData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).ReportData(ctx, req.(*DataReport))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Reporter",
	HandlerType: (*ReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reportData",
			Handler:    _Reporter_ReportData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wrt.proto",
}

func init() { proto.RegisterFile("wrt.proto", fileDescriptor_wrt_d384817e0f1fbd38) }

var fileDescriptor_wrt_d384817e0f1fbd38 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbf, 0x4e, 0x03, 0x31,
	0x0c, 0xc6, 0x69, 0xee, 0xfa, 0xe7, 0xcc, 0xbf, 0x2a, 0x62, 0x88, 0x58, 0xa8, 0x32, 0x75, 0xba,
	0xa1, 0x6c, 0xcc, 0xec, 0x48, 0x79, 0x83, 0x34, 0x4d, 0xa5, 0x08, 0x9a, 0x8b, 0x12, 0x9f, 0x78,
	0x0c, 0x5e, 0x19, 0xd9, 0x39, 0x0e, 0xc4, 0xf6, 0xf3, 0x27, 0xfb, 0xcb, 0x67, 0x07, 0xba, 0xcf,
	0x8c, 0x7d, 0xca, 0x03, 0x0e, 0xb2, 0xbd, 0xd8, 0x10, 0xb5, 0x86, 0x55, 0x41, 0x8b, 0x63, 0x91,
	0x0a, 0xd6, 0x65, 0x74, 0xce, 0x97, 0xa2, 0x16, 0xbb, 0xc5, 0x7e, 0x63, 0x7e, 0x4a, 0x7d, 0x04,
	0x38, 0x59, 0xb4, 0xc6, 0xa7, 0x21, 0xa3, 0x94, 0xd0, 0x62, 0xb8, 0x78, 0x6e, 0x6a, 0x0d, 0xb3,
	0x7c, 0x02, 0x11, 0xcf, 0x4a, 0xec, 0x9a, 0xfd, 0xf5, 0xe1, 0xbe, 0x27, 0xe3, 0x3e, 0x7a, 0x3c,
	0x87, 0x0f, 0xf4, 0xd9, 0x88, 0x78, 0xa6, 0x06, 0x87, 0xaa, 0xf9, 0xdb, 0xe0, 0x86, 0x18, 0x31,
	0x5b, 0xf7, 0x6e, 0x84, 0x43, 0xfd, 0x06, 0xdd, 0x3c, 0x21, 0xb7, 0xd0, 0x5c, 0xac, 0xe3, 0x17,
	0x3a, 0x43, 0x28, 0xef, 0x40, 0x84, 0xa4, 0x04, 0x0b, 0x22, 0x24, 0xae, 0xa3, 0x6a, 0x38, 0x82,
	0x08, 0x91, 0x26, 0x86, 0x11, 0x55, 0xcb, 0x02, 0xa1, 0xfe, 0x5a, 0x40, 0x37, 0x3f, 0x21, 0x1f,
	0x60, 0xc9, 0x5b, 0x4f, 0x9e, 0xb5, 0xa0, 0xa9, 0x92, 0xdd, 0x64, 0x4b, 0x48, 0xca, 0xa9, 0x20,
	0x1b, 0x77, 0x86, 0x90, 0xd6, 0x2d, 0xd9, 0x25, 0xb6, 0xbe, 0x35, 0xcc, 0xa4, 0x9d, 0x0a, 0x26,
	0xb5, 0xac, 0x1a, 0xf1, 0x94, 0x68, 0xf5, 0x3f, 0xd1, 0x7a, 0x4e, 0x74, 0x78, 0x81, 0x4d, 0x3d,
	0xa1, 0xcf, 0xb2, 0x07, 0xc8, 0xcc, 0xaf, 0x16, 0xad, 0xdc, 0xd6, 0x8b, 0xfc, 0x1e, 0xf9, 0xf1,
	0xa6, 0x2a, 0xf5, 0x6b, 0xf4, 0xd5, 0x71, 0xc5, 0x81, 0x9f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x10, 0xcf, 0x16, 0xa1, 0xc0, 0x01, 0x00, 0x00,
}
